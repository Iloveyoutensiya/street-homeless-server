// generated by ddl2cpp.py homeless.sql homeless-db db
#ifndef DB_HOMELESS_DB_H
#define DB_HOMELESS_DB_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace db
{
  namespace Characters_
  {
    struct Pid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pid;
            T& operator()() { return pid; }
            const T& operator()() const { return pid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Health
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "health";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T health;
            T& operator()() { return health; }
            const T& operator()() const { return health; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Tiredness
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tiredness";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tiredness;
            T& operator()() { return tiredness; }
            const T& operator()() const { return tiredness; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct MaxHealth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_health";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxHealth;
            T& operator()() { return maxHealth; }
            const T& operator()() const { return maxHealth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct MaxTiredness
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_tiredness";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxTiredness;
            T& operator()() { return maxTiredness; }
            const T& operator()() const { return maxTiredness; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Money
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "money";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T money;
            T& operator()() { return money; }
            const T& operator()() const { return money; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Created
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T created;
            T& operator()() { return created; }
            const T& operator()() const { return created; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct LastConnected
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_connected";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastConnected;
            T& operator()() { return lastConnected; }
            const T& operator()() const { return lastConnected; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
  } // namespace Characters_

  struct Characters: sqlpp::table_t<Characters,
               Characters_::Pid,
               Characters_::Uid,
               Characters_::Name,
               Characters_::Health,
               Characters_::Tiredness,
               Characters_::MaxHealth,
               Characters_::MaxTiredness,
               Characters_::Money,
               Characters_::Created,
               Characters_::LastConnected>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "characters";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characters;
        T& operator()() { return characters; }
        const T& operator()() const { return characters; }
      };
    };
  };
  namespace Inventory_
  {
    struct Sn
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sn";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sn;
            T& operator()() { return sn; }
            const T& operator()() const { return sn; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Pid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pid;
            T& operator()() { return pid; }
            const T& operator()() const { return pid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Amount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "amount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amount;
            T& operator()() { return amount; }
            const T& operator()() const { return amount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Inventory_

  struct Inventory: sqlpp::table_t<Inventory,
               Inventory_::Sn,
               Inventory_::Pid,
               Inventory_::Itemid,
               Inventory_::Amount>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "inventory";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T inventory;
        T& operator()() { return inventory; }
        const T& operator()() const { return inventory; }
      };
    };
  };
  namespace Users_
  {
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Salt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "salt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T salt;
            T& operator()() { return salt; }
            const T& operator()() const { return salt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Created
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T created;
            T& operator()() { return created; }
            const T& operator()() const { return created; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct LastConnected
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_connected";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastConnected;
            T& operator()() { return lastConnected; }
            const T& operator()() const { return lastConnected; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct SessionIp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "session_ip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sessionIp;
            T& operator()() { return sessionIp; }
            const T& operator()() const { return sessionIp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Users_

  struct Users: sqlpp::table_t<Users,
               Users_::Uid,
               Users_::Name,
               Users_::Password,
               Users_::Salt,
               Users_::Created,
               Users_::LastConnected,
               Users_::SessionIp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "users";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T users;
        T& operator()() { return users; }
        const T& operator()() const { return users; }
      };
    };
  };
} // namespace db
#endif
